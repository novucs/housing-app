"use strict";
/*

address
- don't look at other property values not within a quarter of a mile

detached 0.9

house size sq feet 0.6
# rooms 0.6
# bedrooms 0.6

energy rating 0.3
garage 0.3

sale price
date of sale
- every 3 months, add 3%

 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var geolocation = require("nativescript-geolocation");
var nativescript_angular_1 = require("nativescript-angular");
var fileSystem = require("file-system");
var EvaluateComponent = (function () {
    function EvaluateComponent(routerExtensions) {
        this.routerExtensions = routerExtensions;
        this.property = {
            location: undefined,
            detached: false,
            size: undefined,
            rooms: undefined,
            bedrooms: undefined,
            energyRating: undefined,
            garage: false,
            salePrice: undefined,
            saleDate: new Date()
        };
    }
    EvaluateComponent_1 = EvaluateComponent;
    EvaluateComponent.prototype.back = function () {
        this.routerExtensions.navigate(["/index"], { clearHistory: true });
    };
    EvaluateComponent.prototype.parse = function (text) {
        return parseInt(text);
    };
    EvaluateComponent.prototype.submit = function () {
        var _this = this;
        console.log(JSON.stringify(this.property, null, 2));
        if (!this.property.size ||
            !this.property.rooms ||
            !this.property.bedrooms ||
            !this.property.energyRating) {
            alert("You have not filled in all required fields!");
            return;
        }
        while (!geolocation.isEnabled()) {
            geolocation.enableLocationRequest(true);
        }
        var soldFile = fileSystem.knownFolders.currentApp().getFile("sold.json");
        geolocation.getCurrentLocation({}).then(function (location) {
            _this.property.location = location;
            return soldFile.readText();
        }).then(function (content) {
            var soldProperties = [];
            if (content) {
                soldProperties = JSON.parse(content);
            }
            var nearbyProperties = [];
            var min = JSON.parse(JSON.stringify(_this.property));
            var max = JSON.parse(JSON.stringify(_this.property));
            soldProperties.forEach(function (property) {
                var distance = EvaluateComponent_1.distance(property.location, _this.property.location);
                if (distance < 0.25) {
                    nearbyProperties.push(property);
                    for (var key in property) {
                        if (property.hasOwnProperty(key) &&
                            _this.property.hasOwnProperty(key)) {
                            if (property[key] > max[key]) {
                                max[key] = property[key];
                            }
                            if (property[key] < min[key]) {
                                min[key] = property[key];
                            }
                        }
                    }
                }
            });
            if (nearbyProperties.length <= 0) {
                alert("Cannot evaluate house value. No other properties sold in this region have been tracked.");
                return;
            }
            var closest = null;
            var closestValue = 0;
            for (var key in _this.property) {
                if (_this.property.hasOwnProperty(key) &&
                    key.indexOf("Scaled") < 0 &&
                    typeof _this.property[key] == "number") {
                    _this.property[key + "Scaled"] = (_this.property[key] - min[key]) / (max[key] - min[key]);
                }
            }
            var modifiers = {
                detached: 0.9,
                size: 0.6,
                rooms: 0.6,
                bedrooms: 0.6,
                energyRating: 0.3,
                garage: 0.3
            };
            console.log("\n\n-------------------------");
            console.log("\nBEGINNING EVALUATION\n\n");
            console.log("-------------------------\n\n");
            var id = 0;
            nearbyProperties.forEach(function (property) {
                // feature scaling
                for (var key in property) {
                    if (property.hasOwnProperty(key) &&
                        _this.property.hasOwnProperty(key) &&
                        key.indexOf("Scaled") < 0 &&
                        typeof property[key] == "number") {
                        property[key + "Scaled"] = (property[key] - min[key]) / (max[key] - min[key]);
                    }
                }
                var weights = {
                    detached: property.detached == _this.property.detached ? 0 : modifiers.detached,
                    size: Math.sqrt(Math.pow(property.sizeScaled - _this.property["sizeScaled"], 2)) * modifiers.size,
                    rooms: Math.sqrt(Math.pow(property.roomsScaled - _this.property["roomsScaled"], 2)) * modifiers.rooms,
                    bedrooms: Math.sqrt(Math.pow(property.bedroomsScaled - _this.property["bedroomsScaled"], 2)) * modifiers.bedrooms,
                    energyRating: Math.sqrt(Math.pow(property.energyRatingScaled - _this.property["energyRatingScaled"], 2)) * modifiers.energyRating,
                    garage: property.garage == _this.property.garage ? 0 : modifiers.garage
                };
                var value = weights.detached + weights.size + weights.rooms + weights.bedrooms + weights.energyRating + weights.garage;
                console.log("WEIGHTS (" + id++ + "): " + JSON.stringify(weights, null, 2));
                console.log("OVERALL VALUE: " + value + "\n\n");
                if (closest == null || closestValue > value) {
                    closestValue = value;
                    closest = property;
                }
            });
            var price = closest.salePrice;
            var monthDiff = EvaluateComponent_1.monthDiff(new Date(closest.saleDate), _this.property.saleDate);
            console.log(price + "  " + (monthDiff / 3));
            price += price * (monthDiff / 3);
            console.log(price);
            _this.property.salePrice = price;
            alert("The predicted price of your property is: \n$" + price);
        });
    };
    EvaluateComponent.distance = function (loc1, loc2) {
        var lat1 = loc1.latitude;
        var lon1 = loc1.longitude;
        var lat2 = loc2.latitude;
        var lon2 = loc2.longitude;
        var p = 0.017453292519943295;
        var c = Math.cos;
        var a = 0.5 - c((lat2 - lat1) * p) / 2 +
            c(lat1 * p) * c(lat2 * p) *
                (1 - c((lon2 - lon1) * p)) / 2;
        return 7917.509282 * Math.asin(Math.sqrt(a));
    };
    EvaluateComponent.monthDiff = function (d1, d2) {
        var months;
        months = (d2.getFullYear() - d1.getFullYear()) * 12;
        months -= d1.getMonth() + 1;
        months += d2.getMonth();
        return months <= 0 ? 0 : months;
    };
    EvaluateComponent = EvaluateComponent_1 = __decorate([
        core_1.Component({
            templateUrl: "./evaluate.component.html"
        }),
        __metadata("design:paramtypes", [nativescript_angular_1.RouterExtensions])
    ], EvaluateComponent);
    return EvaluateComponent;
    var EvaluateComponent_1;
}());
exports.EvaluateComponent = EvaluateComponent;
//# sourceMappingURL=data:application/json;base64,